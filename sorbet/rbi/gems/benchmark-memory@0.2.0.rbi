# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `benchmark-memory` gem.
# Please instead update this file by running `bin/tapioca gem benchmark-memory`.

# Performance benchmarking library
#
# source://benchmark-memory//lib/benchmark/memory/errors.rb#3
module Benchmark
  extend ::Benchmark::Memory
end

# Benchmark memory usage in code to benchmark different approaches.
#
# @see https://github.com/michaelherold/benchmark-memory
#
# source://benchmark-memory//lib/benchmark/memory/errors.rb#4
module Benchmark::Memory
  # Measure memory usage in report blocks.
  #
  # @param quiet [Boolean] A flag to toggle benchmark output.
  # @raise [ConfigurationError]
  # @return [Report]
  # @yield [job]
  #
  # source://benchmark-memory//lib/benchmark/memory.rb#17
  def memory(quiet: T.unsafe(nil)); end
end

# source://benchmark-memory//lib/benchmark/memory/errors.rb#7
class Benchmark::Memory::ConfigurationError < ::Benchmark::Memory::Error
  # source://benchmark-memory//lib/benchmark/memory/errors.rb#8
  def message; end
end

# source://benchmark-memory//lib/benchmark/memory/errors.rb#5
class Benchmark::Memory::Error < ::StandardError; end

# Collate results that should be held until the next run.
#
# source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#7
class Benchmark::Memory::HeldResults
  extend ::Forwardable

  # Instantiate a new set of held results on a path.
  #
  # @param path [String, IO] The path to write held results to.
  # @return [HeldResults] a new instance of HeldResults
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#15
  def initialize(path = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # Add a result to the held results.
  #
  # @param entry [Report::Entry] The entry to hold.
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#34
  def add_result(entry); end

  # Check whether any results have been stored.
  #
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#44
  def any?; end

  # Clean up the results after all results have been collated.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#55
  def cleanup; end

  # Check whether to hold results.
  #
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#62
  def holding?; end

  # Check whether an entry has been added to the results.
  #
  # @param entry [#label] The entry to check.
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#71
  def include?(entry); end

  # Load results from the serialized output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#78
  def load; end

  # @return [String, IO] The path to write held results to.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#21
  def path; end

  # @return [String, IO] The path to write held results to.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#21
  def path=(_arg0); end

  # @return [Hash{String => Measurement}] Held results from previous runs.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#24
  def results; end

  private

  # Execute a block on the hold file.
  #
  # @param access_mode [String] The mode to use when opening the file.
  # @param _block [Proc] The block to execute on each line of the file.
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results.rb#95
  def with_hold_file(access_mode = T.unsafe(nil), &block); end
end

# Serialize entrys for holding between runs.
#
# source://benchmark-memory//lib/benchmark/memory/held_results/entry_serializer.rb#11
class Benchmark::Memory::HeldResults::EntrySerializer < ::Benchmark::Memory::HeldResults::Serializer
  # Convert a JSON hash into an Entry.
  #
  # @param hash [Hash] A JSON document hash.
  # @return [Report::Entry]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/entry_serializer.rb#17
  def load(hash); end

  # Convert the entry to a Hash.
  #
  # @return [Hash] The entry as a Hash.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/entry_serializer.rb#28
  def to_h; end
end

# Serialize measurements for holding between runs.
#
# source://benchmark-memory//lib/benchmark/memory/held_results/measurement_serializer.rb#11
class Benchmark::Memory::HeldResults::MeasurementSerializer < ::Benchmark::Memory::HeldResults::Serializer
  # Convert a JSON hash into a Measurement.
  #
  # @param hash [Hash] A JSON document hash.
  # @return [Measurement]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/measurement_serializer.rb#17
  def load(hash); end

  # Convert the measurement to a Hash.
  #
  # @return [Hash] The measurement as a Hash.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/measurement_serializer.rb#29
  def to_h; end
end

# Serialize metrics for holding between runs.
#
# source://benchmark-memory//lib/benchmark/memory/held_results/metric_serializer.rb#10
class Benchmark::Memory::HeldResults::MetricSerializer < ::Benchmark::Memory::HeldResults::Serializer
  # Convert a JSON hash into a Metric.
  #
  # @param hash [Hash] A JSON document hash.
  # @return [Measurement::Metric]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/metric_serializer.rb#17
  def load(hash); end

  # Convert the metric to a Hash.
  #
  # @return [Hash] The metric as a Hash.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/metric_serializer.rb#29
  def to_h; end
end

# Serialize objects for holding between runs.
#
# source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#9
class Benchmark::Memory::HeldResults::Serializer
  # Instantiate a new serializer.
  #
  # @param object [Object] The object to serialize.
  # @return [Serializer] a new instance of Serializer
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#23
  def initialize(object = T.unsafe(nil)); end

  # Convert a JSON document into an object.
  #
  # @param _hash [Hash] A JSON document hash.
  # @raise [NotImplementedError] If the inheriting subclass didn't implement.
  # @return [Object]
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#37
  def load(_hash); end

  # @return [Object] The object to serialize.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#28
  def object; end

  # Convert the object to a Hash.
  #
  # @raise [NotImplementedError] If the inheriting subclass didn't implement.
  # @return [Hash] The object as a Hash.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#49
  def to_h; end

  # Convert the object to a JSON document.
  #
  # @return [String] The object as a JSON document.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#59
  def to_json(*args); end

  # Convert the object to a JSON document.
  #
  # @return [String] The object as a JSON document.
  #
  # source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#59
  def to_s(*args); end

  class << self
    # Load an object from a JSON document.
    #
    # @param json [String] A JSON document as a string.
    # @return [Object] The object converted from the JSON document.
    #
    # source://benchmark-memory//lib/benchmark/memory/held_results/serializer.rb#15
    def load(json); end
  end
end

# Helper methods for formatting output.
#
# source://benchmark-memory//lib/benchmark/memory/helpers.rb#8
module Benchmark::Memory::Helpers
  # Right-justifies to a length of 20 or adds a line of padding when longer.
  #
  # @param label [#to_s] The label to justify.
  # @return [String] The justified label.
  #
  # source://benchmark-memory//lib/benchmark/memory/helpers.rb#14
  def rjust(label); end

  private

  # Scale a value into human-understandable terms.
  #
  # @param value [Integer, Float] The value to scale.
  # @return [String] The scaled value.
  #
  # source://benchmark-memory//lib/benchmark/memory/helpers.rb#29
  def scale(value); end

  class << self
    # Scale a value into human-understandable terms.
    #
    # @param value [Integer, Float] The value to scale.
    # @return [String] The scaled value.
    #
    # source://benchmark-memory//lib/benchmark/memory/helpers.rb#29
    def scale(value); end
  end
end

# Transforms raw numbers into a human-readable scale and suffix
#
# source://benchmark-memory//lib/benchmark/memory/human_readable_unit.rb#8
class Benchmark::Memory::HumanReadableUnit < ::SimpleDelegator
  # @return [Integer] the exponential scale of the value
  #
  # source://benchmark-memory//lib/benchmark/memory/human_readable_unit.rb#10
  def scale; end

  # @return [String] the single-character unit for the value
  #
  # source://benchmark-memory//lib/benchmark/memory/human_readable_unit.rb#23
  def unit; end
end

# Encapsulate the memory measurements of reports.
#
# source://benchmark-memory//lib/benchmark/memory/job/task.rb#8
class Benchmark::Memory::Job
  extend ::Forwardable

  # Instantiate a job for containing memory performance reports.
  #
  # @param output [#puts] The output to use for showing the job results.
  # @param quiet [Boolean] A flag for stopping output.
  # @return [Job]
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#23
  def initialize(output: T.unsafe(nil), quiet: T.unsafe(nil)); end

  # Enable output of a comparison of the different tasks.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#49
  def compare!(**spec); end

  # Check whether the job should do a comparison.
  #
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#42
  def compare?; end

  # @return [Report] the full report of all measurements in the job.
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#32
  def full_report; end

  # Enable holding results to compare between separate runs.
  #
  # @param held_path [String, IO] The location to save the held results.
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#58
  def hold!(held_path); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def holding?(*args, **_arg1, &block); end

  # Check whether the job is set to quiet.
  #
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#118
  def quiet?; end

  # Add a measurement entry to the job to measure the specified block.
  #
  # @param label [String] The label for the measured code.
  # @param block [Proc] Code the measure.
  # @raise [ArgumentError] if no code block is specified.
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#68
  def report(label = T.unsafe(nil), &block); end

  # Run the job and outputs its full report.
  #
  # @return [Report]
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#77
  def run; end

  # Run a comparison of the entries and puts it on the output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#109
  def run_comparison; end

  # Run a task.
  #
  # @param task [Task]
  # @return [Boolean] A flag indicating whether to hold or not.
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#98
  def run_task(task); end

  # @return [Array<Task>] the measurement tasks to run.
  #
  # source://benchmark-memory//lib/benchmark/memory/job.rb#35
  def tasks; end

  private

  # source://benchmark-memory//lib/benchmark/memory/job.rb#124
  def run_with_held_results(task); end

  # source://benchmark-memory//lib/benchmark/memory/job.rb#130
  def run_without_held_results(task); end
end

# Output the results of jobs into an IO.
#
# source://benchmark-memory//lib/benchmark/memory/job/io_output/metric_formatter.rb#8
class Benchmark::Memory::Job::IOOutput
  # Instantiate a new output that writes to an IO.
  #
  # @param io [#puts] The IO to write on.
  # @return [IOOutput] a new instance of IOOutput
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output.rb#14
  def initialize(io); end

  # Put the comparison onto the output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output.rb#28
  def put_comparison(comparison); end

  # Put the entry onto the output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output.rb#21
  def put_entry(entry); end

  # Put the header onto the output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output.rb#37
  def put_header; end

  # Put a notice that the execution is holding for another run.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output.rb#44
  def put_hold_notice; end
end

# Format a comparison for use with the IOOutput.
#
# source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#11
class Benchmark::Memory::Job::IOOutput::ComparisonFormatter
  include ::Benchmark::Memory::Helpers

  # Instantiate a formatter to output an comparison into an IO.
  #
  # @param comparison [Report::Comparison] The comparison to format.
  # @return [ComparisonFormatter] a new instance of ComparisonFormatter
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#17
  def initialize(comparison); end

  # @return [Report::Comparison] The comparison to format.
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#22
  def comparison; end

  # Format comparison to a string to put on the output.
  #
  # @return [String]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#27
  def to_s; end

  private

  # source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#45
  def add_best_summary(best, output); end

  # source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#49
  def add_comparison(entry, best, output); end

  # source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#55
  def comparison_between(entry, best); end

  # source://benchmark-memory//lib/benchmark/memory/job/io_output/comparison_formatter.rb#65
  def summary_message(message, entry); end
end

# Format entries for use with the IOOutput.
#
# source://benchmark-memory//lib/benchmark/memory/job/io_output/entry_formatter.rb#12
class Benchmark::Memory::Job::IOOutput::EntryFormatter
  include ::Benchmark::Memory::Helpers

  # Instantiate a formatter to output an entry into an IO.
  #
  # @param entry [Entry] The entry to format.
  # @return [EntryFormatter] a new instance of EntryFormatter
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/entry_formatter.rb#18
  def initialize(entry); end

  # @return [Entry] The entry to format.
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/entry_formatter.rb#23
  def entry; end

  # Format entry to a string to put on the output.
  #
  # @return [String]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/entry_formatter.rb#28
  def to_s; end
end

# Format metrics for use with the IOOutput.
#
# source://benchmark-memory//lib/benchmark/memory/job/io_output/metric_formatter.rb#10
class Benchmark::Memory::Job::IOOutput::MetricFormatter
  include ::Benchmark::Memory::Helpers

  # Instantiate a formatter to output a metric into an IO.
  #
  # @param metric [Measurement::Metric] The metric to format.
  # @return [MetricFormatter] a new instance of MetricFormatter
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/metric_formatter.rb#16
  def initialize(metric); end

  # @return [Metric] The metric to format.
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/metric_formatter.rb#21
  def metric; end

  # Format metric to a string to put on the output.
  #
  # @return [String]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/metric_formatter.rb#26
  def to_s; end

  private

  # @return [String] the formated string for allocated memory
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/metric_formatter.rb#33
  def allocated_message; end

  # @return [String] the formated string for retained memory
  #
  # source://benchmark-memory//lib/benchmark/memory/job/io_output/metric_formatter.rb#42
  def retained_message; end
end

# Swallow all output from a job.
#
# source://benchmark-memory//lib/benchmark/memory/job/null_output.rb#7
class Benchmark::Memory::Job::NullOutput
  # Swallow comparison output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/null_output.rb#16
  def put_comparison(comparison); end

  # Swallow entry output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/null_output.rb#11
  def put_entry(entry); end

  # Swallow header output.
  #
  # @return [void]
  #
  # source://benchmark-memory//lib/benchmark/memory/job/null_output.rb#21
  def put_header; end
end

# Hold a labelled job for later measurement.
#
# source://benchmark-memory//lib/benchmark/memory/job/task.rb#10
class Benchmark::Memory::Job::Task
  # Instantiate a job task for later measurement.
  #
  # @param label [#to_s] The label for the benchmark.
  # @param action [#call] The code to be measured.
  # @raise [ArgumentError] if the action does not respond to `#call`.
  # @return [Task] a new instance of Task
  #
  # source://benchmark-memory//lib/benchmark/memory/job/task.rb#17
  def initialize(label, action); end

  # @return [#call] The code to be measured.
  #
  # source://benchmark-memory//lib/benchmark/memory/job/task.rb#30
  def action; end

  # Call the action and report on its memory usage.
  #
  # @return [Measurement] the memory usage measurement of the code.
  #
  # source://benchmark-memory//lib/benchmark/memory/job/task.rb#38
  def call; end

  # @return [#to_s] The label for the benchmark.
  #
  # source://benchmark-memory//lib/benchmark/memory/job/task.rb#33
  def label; end

  private

  # source://benchmark-memory//lib/benchmark/memory/job/task.rb#46
  def while_measuring_memory_usage(&block); end
end

# Encapsulate the combined metrics of an action.
#
# source://benchmark-memory//lib/benchmark/memory/measurement/metric.rb#7
class Benchmark::Memory::Measurement
  include ::Enumerable
  extend ::Forwardable

  # Instantiate a Measurement of memory usage.
  #
  # @param memory [Metric] The memory usage of an action.
  # @param objects [Metric] The object allocations of an action.
  # @param strings [Metric] The string allocations of an action.
  # @return [Measurement] a new instance of Measurement
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement.rb#30
  def initialize(memory:, objects:, strings:); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # @return [Metric] The memory allocation metric.
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement.rb#38
  def memory; end

  # @return [Array<Metric>] The metrics for the measurement.
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement.rb#41
  def metrics; end

  # @return [Metric] The object allocation metric.
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement.rb#44
  def objects; end

  # @return [Metric] The string allocation metric.
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement.rb#47
  def strings; end

  class << self
    # Create a Measurement from a MemoryProfiler::Results object.
    #
    # @param result [MemoryProfiler::Results] The results of a MemoryProfiler report.
    #
    # source://benchmark-memory//lib/benchmark/memory/measurement.rb#17
    def from_result(result); end
  end
end

# Describe the ratio of allocated vs. retained memory in a measurement.
#
# source://benchmark-memory//lib/benchmark/memory/measurement/metric.rb#9
class Benchmark::Memory::Measurement::Metric
  # Instantiate a Metric of allocated vs. retained memory.
  #
  # @param type [Symbol] The type of memory allocated in the metric.
  # @param allocated [Integer] The amount allocated in the metric.
  # @param retained [Integer] The amount retained in the metric.
  # @return [Metric] a new instance of Metric
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement/metric.rb#15
  def initialize(type, allocated, retained); end

  # @return [Integer] The amount allocated in the metric.
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement/metric.rb#22
  def allocated; end

  # @return [Integer] The amount retained in the metric.
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement/metric.rb#25
  def retained; end

  # @return [Symbol] The type of memory allocated in the metric.
  #
  # source://benchmark-memory//lib/benchmark/memory/measurement/metric.rb#28
  def type; end
end

# Extracts metrics from a memory profiler result
#
# source://benchmark-memory//lib/benchmark/memory/measurement/metric_extractor.rb#8
class Benchmark::Memory::MetricExtractor
  class << self
    # Extracts the memory-specific metrics from a profiler result
    #
    # @param result [MemoryProfiler::Results]
    # @return [Benchmark::Memory::Measurement::Metric]
    #
    # source://benchmark-memory//lib/benchmark/memory/measurement/metric_extractor.rb#13
    def extract_memory(result); end

    # Extracts the object-specific metrics from a profiler result
    #
    # @param result [MemoryProfiler::Results]
    # @return [Benchmark::Memory::Measurement::Metric]
    #
    # source://benchmark-memory//lib/benchmark/memory/measurement/metric_extractor.rb#25
    def extract_objects(result); end

    # Extracts the string-specific metrics from a profiler result
    #
    # @param result [MemoryProfiler::Results]
    # @return [Benchmark::Memory::Measurement::Metric]
    #
    # source://benchmark-memory//lib/benchmark/memory/measurement/metric_extractor.rb#37
    def extract_strings(result); end
  end
end

# Hold the results of a set of benchmarks.
#
# source://benchmark-memory//lib/benchmark/memory/report/entry.rb#7
class Benchmark::Memory::Report
  # Instantiate a report to hold entries of tasks and measurements.
  #
  # @return [Report]
  #
  # source://benchmark-memory//lib/benchmark/memory/report.rb#13
  def initialize; end

  # Add an entry to the report.
  #
  # @param task [Job::Task] The task to report about.
  # @param measurement [Measurement] The measurements from the task.
  # @return [Entry] the newly created entry.
  #
  # source://benchmark-memory//lib/benchmark/memory/report.rb#30
  def add_entry(task, measurement); end

  # Return true if the report is comparable.
  #
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/report.rb#39
  def comparable?; end

  # @return [Comparator] The {Comparator} to use when creating the {Comparison}.
  #
  # source://benchmark-memory//lib/benchmark/memory/report.rb#19
  def comparator; end

  # @return [Comparator] The {Comparator} to use when creating the {Comparison}.
  #
  # source://benchmark-memory//lib/benchmark/memory/report.rb#19
  def comparator=(_arg0); end

  # Compare the entries within a report.
  #
  # @return [Comparison]
  #
  # source://benchmark-memory//lib/benchmark/memory/report.rb#46
  def comparison; end

  # @return [Array<Entry>] The entries in the report.
  #
  # source://benchmark-memory//lib/benchmark/memory/report.rb#22
  def entries; end
end

# Compares two {Entry} for the purposes of sorting and outputting a {Comparison}.
#
# source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#7
class Benchmark::Memory::Report::Comparator
  # Instantiate a new comparator
  #
  # @param metric [Symbol] (see #metric)
  # @param value [Symbol] (see #value)
  # @raise [ArgumentError]
  # @return [Comparator] a new instance of Comparator
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#32
  def initialize(metric: T.unsafe(nil), value: T.unsafe(nil)); end

  # Checks whether a {Comparator} equals another
  #
  # @param other [Benchmark::Memory::Comparator] The comparator to check against
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#51
  def ==(other); end

  # @return [Symbol] The metric to compare, one of `:memory`, `:objects`, or `:strings`
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#41
  def metric; end

  # Converts the {Comparator} to a Proc for passing to a block
  #
  # @return [Proc]
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#58
  def to_proc; end

  # @return [Symbol] The value to compare, one of `:allocated` or `:retained`
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#44
  def value; end

  class << self
    # Instantiates a {Comparator} from a spec given by {Job#compare!}
    #
    # @param spec [Hash<Symbol, Symbol>] The specification given for the {Comparator}
    # @raise [ArgumentError]
    # @return [Comparator]
    #
    # source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#18
    def from_spec(spec); end
  end
end

# @private
#
# source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#9
Benchmark::Memory::Report::Comparator::METRICS = T.let(T.unsafe(nil), Array)

# @private
#
# source://benchmark-memory//lib/benchmark/memory/report/comparator.rb#12
Benchmark::Memory::Report::Comparator::VALUES = T.let(T.unsafe(nil), Array)

# Compare entries against each other.
#
# source://benchmark-memory//lib/benchmark/memory/report/comparison.rb#7
class Benchmark::Memory::Report::Comparison
  extend ::Forwardable

  # Instantiate a new comparison.
  #
  # @param entries [Array<Entry>] The entries to compare.
  # @param comparator [Comparator] The comparator to use when generating.
  # @return [Comparison] a new instance of Comparison
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparison.rb#14
  def initialize(entries, comparator); end

  # @return [Comparator] The {Comparator} to use when generating the {Comparison}.
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparison.rb#20
  def comparator; end

  # @return [Array<Entry>] The entries to compare.
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparison.rb#23
  def entries; end

  # @return [Symbol] The metric to compare, one of `:memory`, `:objects`, or `:strings`
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def metric(*args, **_arg1, &block); end

  # Check if the comparison is possible
  #
  # @return [Boolean]
  #
  # source://benchmark-memory//lib/benchmark/memory/report/comparison.rb#34
  def possible?; end

  # @return [Symbol] The value to compare, one of `:allocated` or `:retained`
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def value(*args, **_arg1, &block); end
end

# An entry in a report about a benchmark.
#
# source://benchmark-memory//lib/benchmark/memory/report/entry.rb#9
class Benchmark::Memory::Report::Entry
  # Instantiate a new entry.
  #
  # @param label [#to_s] The entry label.
  # @param measurement [Measurement] The measurements for the entry.
  # @return [Entry] a new instance of Entry
  #
  # source://benchmark-memory//lib/benchmark/memory/report/entry.rb#14
  def initialize(label, measurement); end

  # Get the total amount of memory allocated in the entry.
  #
  # @param comparison [Comparison] The {Comparison} to compare.
  # @return [Integer]
  #
  # source://benchmark-memory//lib/benchmark/memory/report/entry.rb#29
  def compared_metric(comparison); end

  # @return [#to_s] The entry label.
  #
  # source://benchmark-memory//lib/benchmark/memory/report/entry.rb#20
  def label; end

  # @return [Measurement] The measurements for the entry.
  #
  # source://benchmark-memory//lib/benchmark/memory/report/entry.rb#23
  def measurement; end
end

# source://benchmark-memory//lib/benchmark/memory/version.rb#5
Benchmark::Memory::VERSION = T.let(T.unsafe(nil), String)
