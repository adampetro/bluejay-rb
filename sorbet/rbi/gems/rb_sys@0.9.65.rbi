# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rb_sys` gem.
# Please instead update this file by running `bin/tapioca gem rb_sys`.

# THIS FILE IS AUTO-GENERATED BY `rake data:derive`
#
# source://rb_sys//lib/rb_sys/version.rb#3
module RbSys; end

# Helpers for Cargo
#
# source://rb_sys//lib/rb_sys/cargo/metadata.rb#7
module RbSys::Cargo; end

# Extracts metadata from a Cargo project using `cargo metadata`.
#
# source://rb_sys//lib/rb_sys/cargo/metadata.rb#9
class RbSys::Cargo::Metadata
  # Initializes a new Cargo::Metadata instance.
  #
  # @param name [String] the name of the Cargo project
  # @raise [ArgumentError]
  # @return [Metadata] a new instance of Metadata
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#15
  def initialize(name, deps: T.unsafe(nil)); end

  # Returns the package's Rust edition.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#76
  def edition; end

  # Returns the package's features.
  #
  # @return [Array<String>]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#83
  def features; end

  # Returns the package's id.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#69
  def id; end

  # Returns the path where the Cargo project's Cargo.toml is located.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#27
  def manifest_directory; end

  # Returns the path to the package's Cargo.toml.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#55
  def manifest_path; end

  # Returns the package's custom metadata.
  #
  # @return [Hash]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#90
  def metadata; end

  # Returns the value of attribute name.
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#10
  def name; end

  # Returns the workspace members for the Cargo project.
  #
  # @return [Array<Hash>]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#48
  def packages; end

  # Returns the rb-sys version, if any.
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#95
  def rb_sys_version; end

  # Returns the target directory for the Cargo project.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#34
  def target_directory; end

  # Returns the package's version.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#62
  def version; end

  # Returns the workspace root for the Cargo project.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#41
  def workspace_root; end

  private

  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#111
  def cargo_metadata; end

  # @raise [PackageNotFoundError]
  #
  # source://rb_sys//lib/rb_sys/cargo/metadata.rb#103
  def package_metadata; end
end

# Raised when Cargo metadata cannot be parsed.
#
# source://rb_sys//lib/rb_sys/error.rb#21
class RbSys::CargoMetadataError < ::RbSys::Error
  # @return [CargoMetadataError] a new instance of CargoMetadataError
  #
  # source://rb_sys//lib/rb_sys/error.rb#22
  def initialize(err, stderr); end
end

# Error is the base class for all errors raised by rb_sys.
#
# source://rb_sys//lib/rb_sys/error.rb#5
class RbSys::Error < ::StandardError; end

# ExtensionTask is a Rake::ExtensionTask subclass that is used to tailored for
# Rust extensions. It has the same options a `Rake::ExtensionTask`.
#
# @example
#   RbSys::ExtensionTask.new("my-crate", my_gemspec) do |ext|
#   ext.lib_dir = "lib/my-crate"
#   end
# @param name [String] the crate name to build
# @param gem_spec [Gem::Specification] the gem specification to build (needed for cross-compiling)
# @return [Rake::ExtensionTask]
# @see https://www.rubydoc.info/gems/rake-compiler/Rake/ExtensionTask
#
# source://rb_sys//lib/rb_sys/extensiontask.rb#24
class RbSys::ExtensionTask < ::Rake::ExtensionTask
  # source://rb_sys//lib/rb_sys/extensiontask.rb#62
  def binary(_platf); end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#54
  def cargo_metadata; end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#79
  def cross_compiling(&block); end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#47
  def define; end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#99
  def define_env_tasks; end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#87
  def define_native_tasks(for_platform = T.unsafe(nil), ruby_ver = T.unsafe(nil), callback = T.unsafe(nil)); end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#58
  def extconf; end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#25
  def init(name = T.unsafe(nil), gem_spec = T.unsafe(nil)); end

  # I'm not sure why this is necessary, can it be removed?
  #
  # source://rb_sys//lib/rb_sys/extensiontask.rb#67
  def source_files; end

  # source://rb_sys//lib/rb_sys/extensiontask.rb#83
  def target_directory; end

  private

  # source://rb_sys//lib/rb_sys/extensiontask.rb#127
  def lint_gem_spec(name, gs); end
end

# Raised when a package is not found from the Cargo metadata.
#
# source://rb_sys//lib/rb_sys/error.rb#8
class RbSys::PackageNotFoundError < ::RbSys::Error
  # @return [PackageNotFoundError] a new instance of PackageNotFoundError
  #
  # source://rb_sys//lib/rb_sys/error.rb#9
  def initialize(name); end
end

# A class to get information about the Rust toolchains, and how they map to
# Ruby platforms.
#
# @example
#   RbSys::ToolchainInfo.new("x86_64-unknown-linux-gnu").ruby_platform # => "x86_64-linux"
#   RbSys::ToolchainInfo.new("x86_64-unknown-linux-gnu").supported? # => true
#   RbSys::ToolchainInfo.new("x86_64-unknown-linux-gnu")
#
# source://rb_sys//lib/rb_sys/toolchain_info/data.rb#6
class RbSys::ToolchainInfo
  # Create a new toolchain info object.
  #
  # @param platform [String] The platform to get information about.
  # @return [ToolchainInfo] a new instance of ToolchainInfo
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#42
  def initialize(platform); end

  # Compare two toolchains.
  #
  # @param other [RbSys::ToolchainInfo]
  # @return [Boolean]
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#71
  def ==(other); end

  # Returns the value of attribute docker_platform.
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#14
  def docker_platform; end

  # Returns the value of attribute gem_platform.
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#14
  def gem_platform; end

  # Returns the value of attribute platform.
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#14
  def platform; end

  # Returns the value of attribute rake_compiler_dock_cc.
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#14
  def rake_compiler_dock_cc; end

  # Returns the value of attribute rake_compiler_dock_image.
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#14
  def rake_compiler_dock_image; end

  # Returns the value of attribute rust_target.
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#14
  def rust_target; end

  # Returns the value of attribute supported.
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#14
  def supported; end

  # Whether this toolchain is supported.
  #
  # @return [Boolean]
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#56
  def supported?; end

  # String representation of the toolchain.
  #
  # @return [String]
  #
  # source://rb_sys//lib/rb_sys/toolchain_info.rb#63
  def to_s; end

  class << self
    # Get all known toolchains.
    #
    # @return [Array<RbSys::ToolchainInfo>]
    #
    # source://rb_sys//lib/rb_sys/toolchain_info.rb#20
    def all; end

    # Get the toolchain for the current platform.
    #
    # @return [RbSys::ToolchainInfo]
    #
    # source://rb_sys//lib/rb_sys/toolchain_info.rb#34
    def local; end

    # Get all supported toolchains.
    #
    # @return [Array<RbSys::ToolchainInfo>]
    #
    # source://rb_sys//lib/rb_sys/toolchain_info.rb#27
    def supported; end
  end
end

# @private
#
# source://rb_sys//lib/rb_sys/toolchain_info/data.rb#8
RbSys::ToolchainInfo::DATA = T.let(T.unsafe(nil), Hash)

# source://rb_sys//lib/rb_sys/version.rb#4
RbSys::VERSION = T.let(T.unsafe(nil), String)
